USE pharmacy_db;

-- 0) Drop existing objects
DROP VIEW IF EXISTS vw_inventory_units;
DROP TABLE IF EXISTS sale_items;
DROP TABLE IF EXISTS sales;
DROP TABLE IF EXISTS inventory;
DROP TABLE IF EXISTS medicine_packaging;
DROP TABLE IF EXISTS packaging_types;
DROP TABLE IF EXISTS medicines;
DROP TABLE IF EXISTS patient_allergies;
DROP TABLE IF EXISTS patients;
DROP TABLE IF EXISTS user_sessions;
DROP TABLE IF EXISTS users;

-- 1) USERS & SESSIONS
CREATE TABLE users (
  id            INT                     NOT NULL AUTO_INCREMENT,
  full_name     VARCHAR(200)            NOT NULL,
  username      VARCHAR(100)            NOT NULL UNIQUE,
  password_hash VARCHAR(255)            NOT NULL,
  user_type     ENUM('Admin','Pharmacist') NOT NULL,
  PRIMARY KEY (id)
) ENGINE=InnoDB CHARSET=utf8mb4;

CREATE TABLE user_sessions (
  session_id   INT       NOT NULL AUTO_INCREMENT,
  user_id      INT       NOT NULL,
  login_time   DATETIME  NOT NULL DEFAULT CURRENT_TIMESTAMP,
  logout_time  DATETIME  NULL,
  PRIMARY KEY (session_id),
  KEY (user_id),
  FOREIGN KEY (user_id) REFERENCES users(id)
    ON UPDATE CASCADE ON DELETE CASCADE
) ENGINE=InnoDB CHARSET=utf8mb4;

-- 2) PATIENTS & ALLERGIES
CREATE TABLE patients (
  id                 INT                    NOT NULL AUTO_INCREMENT,
  full_name          VARCHAR(200)           NOT NULL,
  phone_number       VARCHAR(200)           NOT NULL,
  birth_date         DATE                   NOT NULL,
  registration_time  DATETIME               NOT NULL DEFAULT CURRENT_TIMESTAMP,
  sexual_orientation ENUM('Male','Female')  NOT NULL,
  PRIMARY KEY (id)
) ENGINE=InnoDB CHARSET=utf8mb4;

CREATE TABLE patient_allergies (
  patient_id        INT          NOT NULL,
  active_ingredient VARCHAR(255) NOT NULL,
  reaction          VARCHAR(255) NULL,
  PRIMARY KEY (patient_id, active_ingredient),
  FOREIGN KEY (patient_id) REFERENCES patients(id)
    ON UPDATE CASCADE ON DELETE CASCADE
) ENGINE=InnoDB CHARSET=utf8mb4;

-- 3) MEDICINES
CREATE TABLE medicines (
  barcode           VARCHAR(50)    NOT NULL,
  name_en           VARCHAR(255)   NOT NULL,
  name_ar           VARCHAR(255)   NOT NULL,
  active_ingredient VARCHAR(255)   NOT NULL,
  dose              VARCHAR(20)    NOT NULL,
  medicine_type     ENUM('Tablet','Drink','Cream','Other') NOT NULL,
  price_per_box     DECIMAL(10,2)  NOT NULL,
  price_per_strip   DECIMAL(10,2)  NULL,
  company           VARCHAR(200)   NOT NULL,
  `use`             TEXT           NULL,
  last_updated      DATETIME       NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  origin            ENUM('Local','Imported') NOT NULL,
  PRIMARY KEY (barcode)
) ENGINE=InnoDB CHARSET=utf8mb4;

-- 4) PACKAGING TYPES & MAPPING
CREATE TABLE packaging_types (
  id   TINYINT            NOT NULL AUTO_INCREMENT,
  name ENUM('unit','strip','box') NOT NULL,
  PRIMARY KEY (id),
  UNIQUE KEY ux_pack (name)
) ENGINE=InnoDB CHARSET=utf8mb4;

CREATE TABLE medicine_packaging (
  barcode           VARCHAR(50) NOT NULL,
  packaging_type_id TINYINT     NOT NULL,
  PRIMARY KEY (barcode, packaging_type_id),
  FOREIGN KEY (barcode) REFERENCES medicines(barcode)
    ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (packaging_type_id) REFERENCES packaging_types(id)
    ON UPDATE CASCADE ON DELETE RESTRICT
) ENGINE=InnoDB CHARSET=utf8mb4;

-- 5) INVENTORY
CREATE TABLE inventory (
  barcode           VARCHAR(50) NOT NULL,
  packaging_type_id TINYINT     NOT NULL,
  quantity          INT         NOT NULL,
  expiry_date       DATE        NOT NULL,
  last_updated      DATETIME    NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  PRIMARY KEY (barcode, packaging_type_id),
  FOREIGN KEY (barcode, packaging_type_id)
    REFERENCES medicine_packaging(barcode, packaging_type_id)
      ON UPDATE CASCADE ON DELETE RESTRICT
) ENGINE=InnoDB CHARSET=utf8mb4;

-- 6) SALES & ITEMS
CREATE TABLE sales (
  sale_id      INT           NOT NULL AUTO_INCREMENT,
  user_id      INT           NOT NULL,
  patient_id   INT           NULL,
  sale_time    DATETIME      NOT NULL DEFAULT CURRENT_TIMESTAMP,
  discount     DECIMAL(10,2) NOT NULL DEFAULT 0.00,
  total_amount DECIMAL(12,2) NOT NULL,
  amount_paid  DECIMAL(12,2) NOT NULL,
  change_due   DECIMAL(12,2) AS ((amount_paid - discount) - total_amount) STORED,
  PRIMARY KEY (sale_id),
  FOREIGN KEY (user_id) REFERENCES users(id)
    ON UPDATE CASCADE ON DELETE RESTRICT,
  FOREIGN KEY (patient_id) REFERENCES patients(id)
    ON UPDATE CASCADE ON DELETE SET NULL
) ENGINE=InnoDB CHARSET=utf8mb4;

CREATE TABLE sale_items (
  sale_item_id      INT           NOT NULL AUTO_INCREMENT,
  sale_id           INT           NOT NULL,
  barcode           VARCHAR(50)   NOT NULL,
  packaging_type_id TINYINT       NOT NULL,
  quantity          INT           NOT NULL,
  unit_price        DECIMAL(10,2) NOT NULL,
  line_total        DECIMAL(12,2) AS (quantity * unit_price) STORED,
  PRIMARY KEY (sale_item_id),
  FOREIGN KEY (sale_id) REFERENCES sales(sale_id)
    ON UPDATE CASCADE ON DELETE CASCADE,
  FOREIGN KEY (barcode, packaging_type_id)
    REFERENCES medicine_packaging(barcode, packaging_type_id)
      ON UPDATE CASCADE ON DELETE RESTRICT
) ENGINE=InnoDB CHARSET=utf8mb4;

-- 7) INVENTORY VIEW
CREATE VIEW vw_inventory_units AS
SELECT
  i.barcode,
  pt.name       AS packaging,
  i.quantity    AS packs_on_hand,
  i.expiry_date,
  i.last_updated
FROM inventory i
JOIN packaging_types pt ON pt.id = i.packaging_type_id;

-- 8) SEED DATA

-- 8.1) packaging_types
INSERT INTO packaging_types (name) VALUES
  ('unit'),('strip'),('box');

-- 8.2) users
INSERT INTO users (full_name, username, password_hash, user_type) VALUES
  ('Abdulrahman','JustAGeek','$2a$11$QrHiXrhugIblUfjAkx21IOW1si1TMkH14kW8iwz3sUna8vthONUUK','Admin'),
  ('Ali','lol','$2a$11$MvDx38arYHHmkdiDJvA23.Cik8gRx1WxFBeYaqZZ4iqZQQVp6OisG','Pharmacist'),
  ('Ahmed Mohamed','Ahmed123','$2a$11$dCV0GKdRDkB/o2HJEJjCceX29HjASFopOSWFSw/sP.NXefjxhVZaC','Admin');

-- 8.3) patients
INSERT INTO patients (full_name, phone_number, birth_date, sexual_orientation) VALUES
  ('John Doe','01008481753','1980-05-12','Male'),
  ('Jane Smith','01008481753','1975-11-30','Female'),
  ('Carlos Gomez','01008481753','1992-03-20','Male'),
  ('Li Wei','01008481753','1988-08-08','Male'),
  ('Fatima Al-Amin','01008481753','2000-02-14','Female');

-- 8.4) patient_allergies
INSERT INTO patient_allergies (patient_id, active_ingredient, reaction) VALUES
  (1,'Ingredient5','Rash'),
  (1,'Ingredient12','Hives'),
  (2,'Ingredient7','Anaphylaxis'),
  (2,'Ingredient25','Breathing difficulty'),
  (3,'Ingredient18','Stomach pain'),
  (3,'Ingredient30','Headache'),
  (4,'Ingredient3','Dizziness'),
  (4,'Ingredient45','Nausea'),
  (5,'Ingredient50','Swelling'),
  (5,'Ingredient60','Itching');

-- 8.5) medicines via stored procedure
DELIMITER $$
CREATE PROCEDURE seed_medicines()
BEGIN
  DECLARE i INT DEFAULT 1;
  WHILE i <= 70 DO
    INSERT INTO medicines (
      barcode,name_en,name_ar,active_ingredient,dose,
      medicine_type,price_per_box,price_per_strip,
      company,`use`,origin
    ) VALUES (
      CONCAT('MD',LPAD(i,5,'0')),
      CONCAT('Drug',i,' 10mg'),
      CONCAT('دواء',i,' 10ملغ'),
      CONCAT('Ingredient',i),
      '10mg',
      IF(i <= 50,'Tablet','Drink'),
      IF(i <= 50,20.00,15.00),
      IF(i <= 50,2.00,NULL),
      CONCAT('PharmaCo',CHAR(64 + MOD(i-1,5) +1)),
      'Use as directed',
      IF(MOD(i,2)=0,'Local','Imported')
    );
    SET i = i + 1;
  END WHILE;
END$$
DELIMITER ;

CALL seed_medicines();
DROP PROCEDURE IF EXISTS seed_medicines;

-- 8.6) medicine_packaging
INSERT IGNORE INTO medicine_packaging (barcode, packaging_type_id)
SELECT m.barcode, pt.id FROM medicines m
JOIN packaging_types pt ON pt.name='unit';

INSERT IGNORE INTO medicine_packaging (barcode, packaging_type_id)
SELECT m.barcode, pt.id FROM medicines m
JOIN packaging_types pt ON pt.name IN('strip','box')
WHERE m.medicine_type='Tablet';

-- 8.7) inventory scenarios
INSERT INTO inventory (barcode, packaging_type_id, quantity, expiry_date)
SELECT
  mp.barcode,
  mp.packaging_type_id,
  CASE
    WHEN mp.barcode IN ('MD00001','MD00002','MD00003') THEN 2
    WHEN mp.barcode IN ('MD00004','MD00005')             THEN FLOOR(RAND()*3)+1
    WHEN mp.barcode IN ('MD00006','MD00007')             THEN FLOOR(RAND()*4)+6
    ELSE FLOOR(RAND()*90)+10
  END,
  CASE
    WHEN mp.barcode IN ('MD00004','MD00005') THEN DATE_SUB(CURDATE(),INTERVAL FLOOR(RAND()*5)+1 DAY)
    WHEN mp.barcode IN ('MD00006','MD00007') THEN DATE_ADD(CURDATE(),INTERVAL FLOOR(RAND()*7)+1 DAY)
    ELSE DATE_ADD(CURDATE(),INTERVAL FLOOR(RAND()*336)+30 DAY)
  END
FROM medicine_packaging mp;

-- 8.8) sales
INSERT INTO sales (user_id,patient_id,discount,total_amount,amount_paid) VALUES
  (1,1,0.00,100.00,100.00),
  (2,2,5.00,75.00,80.00),
  (3,3,10.00,200.00,210.00),
  (1,4,0.00,50.00,50.00),
  (2,5,2.50,125.00,130.00);

-- 8.9) sale_items (fixed)
-- grab the PK for “box”
SET @box_id = (SELECT id FROM packaging_types WHERE name='box');

-- now only pick barcodes that have box packaging
INSERT INTO sale_items 
  (sale_id, barcode, packaging_type_id, quantity, unit_price)
SELECT
  s.sale_id,
  mp.barcode,
  mp.packaging_type_id,
  FLOOR(RAND()*3)+1,       -- random 1–3 boxes
  m.price_per_box
FROM sales AS s
JOIN medicine_packaging AS mp
  ON mp.packaging_type_id = @box_id
JOIN medicines AS m
  ON m.barcode = mp.barcode
ORDER BY RAND()
LIMIT 15;